
package com.github.nalamodikk.common.block.mana_generator.logic;

import com.github.nalamodikk.common.capability.IUnifiedManaHandler;
import com.github.nalamodikk.common.capability.mana.ManaAction;
import com.github.nalamodikk.common.register.ModCapabilities;
import com.github.nalamodikk.common.utils.capability.IOHandlerUtils;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerLevel;
import net.neoforged.neoforge.capabilities.BlockCapabilityCache;
import net.neoforged.neoforge.capabilities.Capabilities;
import net.neoforged.neoforge.energy.IEnergyStorage;
import com.github.nalamodikk.common.capability.ManaStorage;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;

public class OutputHandler {

    private static final int MAX_OUTPUT_PER_TICK = 40;

    public static boolean tryOutput(ServerLevel level, BlockPos pos, ManaStorage manaStorage, IEnergyStorage energyStorage, EnumMap<Direction, IOHandlerUtils.IOType> ioMap) {
        List<IUnifiedManaHandler> manaTargets = new ArrayList<>();
        List<Integer> manaDemands = new ArrayList<>();
        int totalManaDemand = 0;

        List<IEnergyStorage> energyTargets = new ArrayList<>();
        List<Integer> energyDemands = new ArrayList<>();
        int totalEnergyDemand = 0;

        for (Direction dir : Direction.values()) {
            IOHandlerUtils.IOType type = ioMap.getOrDefault(dir, IOHandlerUtils.IOType.DISABLED);
            if (!type.outputs()) continue;

            BlockPos targetPos = pos.relative(dir);
            Direction inputSide = dir.getOpposite();

            // È≠îÂäõÊé•Êî∂Á´Ø
            IUnifiedManaHandler manaTarget = BlockCapabilityCache.create(ModCapabilities.MANA, level, targetPos, inputSide).getCapability();
            if (manaTarget != null && manaStorage != null && manaTarget.canReceive()) {
                int demand = manaTarget.getMaxManaStored() - manaTarget.getManaStored();
                // TODO [OutputHandlerV2]ÔºöÁõÆÂâçÁöÑ„ÄåÈúÄÊ±ÇÂÄº„ÄçÊòØ‰ΩøÁî®„ÄåÊúÄÂ§ßÂÆπÈáè - Áï∂ÂâçÂÑ≤Èáè„Äç‰æÜ‰º∞ÁÆóÊé•Êî∂Á´ØÁöÑÂèØÊé•Êî∂Á©∫Èñì
                // TODO: [OutputHandlerV2] ÂÑ≤Èáè‰º∞ÁÆóÁõÆÂâçÁÇ∫ÈùúÊÖãÊ®°Âûã
                // NOTE: ÂèØÊé•‰∏ã‰æÜËßÄÂØüÁé©ÂÆ∂ÊòØÂê¶Â∏∏Â∏∏ËÆìÂ∞èÂÆπÈáèÊ©üÂô®Âç°‰∏çÂà∞ mana
                // NOTE: È†êË®≠ÈÇèËºØÈõñÁ∞°ÂñÆÔºå‰ΩÜÂ∞çÊñºÈ´òÊµÅÈáèÂ†¥ÊôØÂèØËÉΩÊúÉÂ§±Ë°°
                // ÈÄôÁ®ÆÈùúÊÖãÈúÄÊ±Ç‰º∞ÁÆóÈÇèËºØÈõñÁÑ∂Á∞°ÂñÆÁ©©ÂÆöÔºå‰ΩÜÂ≠òÂú®‰ª•‰∏ãÊΩõÂú®ÂïèÈ°åÔºö
                // - ÁÑ°Ê≥ïÂà§Êñ∑Êé•Êî∂Á´ØÊòØÂê¶ÂØ¶ÈöõÊ≠£Âú®Ê∂àËÄó mana / energyÔºàÂèØËÉΩÂè™ÊòØ‰∏ÄÁõ¥Â°ûËëó‰∏çÂãïÔºâ
                // - ÂÆπÊòìÂ∞éËá¥ËôïÁêÜÈÄüÂ∫¶Âø´‰ΩÜÂÆπÈáèÂ∞èÁöÑÊ©üÂô®Èï∑ÊúüÊãø‰∏çÂà∞ manaÔºàÈúÄÊ±Ç‰ΩéÔºå‰ΩÜÂÖ∂ÂØ¶ÈúÄË¶ÅÊõ¥Â§öÔºâ
                //
                // Êú™‰æÜÂèØÊì¥ÂÖÖ‰ª•‰∏ãÊ©üÂà∂Ôºö
                // - ÂºïÂÖ•„ÄåÈÅéÂéª N tick ÁöÑÂØ¶ÈöõÊé•Êî∂Èáè„ÄçÂÅöÂãïÊÖãÊªëÂãïÂπ≥Âùá ‚Üí È†ê‰º∞ÁúüÂØ¶ÈúÄÊ±Ç
                // - ‰ΩøÁî®‰∏ä‰∏ÄËº™ÂØ¶ÈöõËº∏ÂÖ•ÊØîÂÄºÔºàÊàêÂäü / ÂòóË©¶Ôºâ‰ΩúÁÇ∫‰∏ã‰∏ÄËº™ÁöÑÂàÜÈÖçÂä†Ê¨ä
                // - ÊäΩË±°Âá∫‰∏ÄÂÄã `DemandEstimator` Ê®°Âûã‰ªãÈù¢ÔºåÂÖÅË®±Â§ñÊéõ‰∏çÂêåÈúÄÊ±ÇÈ†ê‰º∞Á≠ñÁï•
                // - ÊîØÊè¥Áé©ÂÆ∂ÊâãÂãïÈÖçÁΩÆÂêÑÊñπÂêëÂÑ™ÂÖàÈ†ÜÂ∫èÔºàOutput Priority UIÔºâ
                //
                // ÁõÆÂâç‰ªçÁ∂≠ÊåÅÁ∞°ÂñÆÈÇèËºØÔºåÂæÖÊ®°ÁµÑÈÄ≤ÂÖ•‰∏≠ÂæåÊúüÊàñÊúâÁé©ÂÆ∂ÂèçÈ•ãÂæåÂÜçÈáçÊßã„ÄÇ

                if (demand > 0) {
                    manaTargets.add(manaTarget);
                    manaDemands.add(demand);
                    totalManaDemand += demand;
                }
            }

            // ËÉΩÈáèÊé•Êî∂Á´Ø
            IEnergyStorage energyTarget = BlockCapabilityCache.create(Capabilities.EnergyStorage.BLOCK, level, targetPos, inputSide).getCapability();
            if (energyTarget != null && energyStorage != null && energyTarget.canReceive()) {
                int demand = energyTarget.getMaxEnergyStored() - energyTarget.getEnergyStored();
                // TODO: [OutputHandlerV2] ÁõÆÂâçÁöÑ„ÄåÈúÄÊ±ÇÂÄº„ÄçÊòØ‰ΩøÁî®„ÄåÊúÄÂ§ßÂÆπÈáè - Áï∂ÂâçÂÑ≤Èáè„Äç‰æÜ‰º∞ÁÆóÊé•Êî∂Á´ØÁöÑÂèØÊé•Êî∂Á©∫Èñì„ÄÇ
                // TODO: [OutputHandlerV2] ÂÑ≤Èáè‰º∞ÁÆóÁõÆÂâçÁÇ∫ÈùúÊÖãÊ®°Âûã
                // NOTE: ÂèØÊé•‰∏ã‰æÜËßÄÂØüÁé©ÂÆ∂ÊòØÂê¶Â∏∏Â∏∏ËÆìÂ∞èÂÆπÈáèÊ©üÂô®Âç°‰∏çÂà∞ mana
                // NOTE: È†êË®≠ÈÇèËºØÈõñÁ∞°ÂñÆÔºå‰ΩÜÂ∞çÊñºÈ´òÊµÅÈáèÂ†¥ÊôØÂèØËÉΩÊúÉÂ§±Ë°°

                // ÈÄôÁ®ÆÈùúÊÖãÈúÄÊ±Ç‰º∞ÁÆóÈÇèËºØÈõñÁÑ∂Á∞°ÂñÆÁ©©ÂÆöÔºå‰ΩÜÂ≠òÂú®‰ª•‰∏ãÊΩõÂú®ÂïèÈ°åÔºö
                // - ÁÑ°Ê≥ïÂà§Êñ∑Êé•Êî∂Á´ØÊòØÂê¶ÂØ¶ÈöõÊ≠£Âú®Ê∂àËÄó mana / energyÔºàÂèØËÉΩÂè™ÊòØ‰∏ÄÁõ¥Â°ûËëó‰∏çÂãïÔºâ
                // - ÂÆπÊòìÂ∞éËá¥ËôïÁêÜÈÄüÂ∫¶Âø´‰ΩÜÂÆπÈáèÂ∞èÁöÑÊ©üÂô®Èï∑ÊúüÊãø‰∏çÂà∞ manaÔºàÈúÄÊ±Ç‰ΩéÔºå‰ΩÜÂÖ∂ÂØ¶ÈúÄË¶ÅÊõ¥Â§öÔºâ
                //
                // Êú™‰æÜÂèØÊì¥ÂÖÖ‰ª•‰∏ãÊ©üÂà∂Ôºö
                // - ÂºïÂÖ•„ÄåÈÅéÂéª N tick ÁöÑÂØ¶ÈöõÊé•Êî∂Èáè„ÄçÂÅöÂãïÊÖãÊªëÂãïÂπ≥Âùá ‚Üí È†ê‰º∞ÁúüÂØ¶ÈúÄÊ±Ç
                // - ‰ΩøÁî®‰∏ä‰∏ÄËº™ÂØ¶ÈöõËº∏ÂÖ•ÊØîÂÄºÔºàÊàêÂäü / ÂòóË©¶Ôºâ‰ΩúÁÇ∫‰∏ã‰∏ÄËº™ÁöÑÂàÜÈÖçÂä†Ê¨ä
                // - ÊäΩË±°Âá∫‰∏ÄÂÄã `DemandEstimator` Ê®°Âûã‰ªãÈù¢ÔºåÂÖÅË®±Â§ñÊéõ‰∏çÂêåÈúÄÊ±ÇÈ†ê‰º∞Á≠ñÁï•
                // - ÊîØÊè¥Áé©ÂÆ∂ÊâãÂãïÈÖçÁΩÆÂêÑÊñπÂêëÂÑ™ÂÖàÈ†ÜÂ∫èÔºàOutput Priority UIÔºâ
                //
                // ÁõÆÂâç‰ªçÁ∂≠ÊåÅÁ∞°ÂñÆÈÇèËºØÔºåÂæÖÊ®°ÁµÑÈÄ≤ÂÖ•‰∏≠ÂæåÊúüÊàñÊúâÁé©ÂÆ∂ÂèçÈ•ãÂæåÂÜçÈáçÊßã„ÄÇ

                if (demand > 0) {
                    energyTargets.add(energyTarget);
                    energyDemands.add(demand);
                    totalEnergyDemand += demand;
                }
            }
        }

        boolean didOutput = false;

        // È≠îÂäõËº∏Âá∫
        if (manaStorage != null && totalManaDemand > 0 && manaStorage.getManaStored() > 0) {
            int totalToSend = Math.min(manaStorage.getManaStored(), MAX_OUTPUT_PER_TICK);
            int sentTotal = 0; // üëà Êñ∞Â¢ûÔºöÂØ¶ÈöõÈÄÅÂá∫ÁöÑÁ∏ΩÂíå

            for (int i = 0; i < manaTargets.size(); i++) {
                int portion = (int) Math.round(totalToSend * (manaDemands.get(i) / (double) totalManaDemand));
                int accepted = manaTargets.get(i).receiveMana(portion, ManaAction.EXECUTE);
                if (accepted > 0) {
                    manaStorage.extractMana(accepted, ManaAction.EXECUTE);
                    didOutput = true;
                }
                sentTotal += accepted; // üëà Á¥ØÂä†ÂØ¶ÈöõÈÄÅÂá∫Èáè
            }
            int remainder = totalToSend - sentTotal;
            if (remainder > 0 && !manaTargets.isEmpty()) {
                int accepted = manaTargets.get(0).receiveMana(remainder, ManaAction.EXECUTE);
                if (accepted > 0) {
                    manaStorage.extractMana(accepted, ManaAction.EXECUTE);
                    didOutput = true;
                }
            }
        }

        // ËÉΩÈáèËº∏Âá∫
        // ËÉΩÈáèËº∏Âá∫
        if (energyStorage != null && totalEnergyDemand > 0 && energyStorage.getEnergyStored() > 0) {
            int sentTotal = 0;
            int totalToSend = Math.min(energyStorage.getEnergyStored(), MAX_OUTPUT_PER_TICK);

            for (int i = 0; i < energyTargets.size(); i++) {
                int portion = (int) Math.round(totalToSend * (energyDemands.get(i) / (double) totalEnergyDemand));
                int accepted = energyTargets.get(i).receiveEnergy(portion, false);
                if (accepted > 0) {
                    energyStorage.extractEnergy(accepted, false);
                    didOutput = true;
                }
                sentTotal += accepted; // ‚úÖ Êºè‰∫ÜÈÄôË°åÔºÅ
            }

            int remainder = totalToSend - sentTotal;
            if (remainder > 0 && !energyTargets.isEmpty()) {
                int accepted = energyTargets.get(0).receiveEnergy(remainder, false); // ‚úÖ ‰øÆÊ≠£ manaTargets ‚Üí energyTargets
                if (accepted > 0) {
                    energyStorage.extractEnergy(accepted, false);
                    didOutput = true;
                }
            }
        }

        return didOutput;
    }


    public static class OutputThrottleController {
        private int noOutputStreak = 0;
        private int currentDelay = 0;

        public boolean shouldTryOutput() {
            return currentDelay-- <= 0;
        }

        public void recordOutputResult(boolean success) {
            if (success) {
                noOutputStreak = 0;
                currentDelay = 1; // ÊàêÂäüÂæå‰∏ãÊ¨°‰ªçÊúÉÈ¶¨‰∏äÂÜçÂòóË©¶‰∏ÄÊ¨°
            } else {
                noOutputStreak++;
                currentDelay = Math.min(10, noOutputStreak); // ÊØèÂ§±Êïó‰∏ÄÊ¨°Â∞±Âª∂Èï∑‰∏ã‰∏ÄÊ¨°ÁöÑ delayÔºàÊúÄÂ§ö10Ôºâ
            }
        }
    }


}
